/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.trackunit.fleet.data.health.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Fleet Data Health Issue */
@org.apache.avro.specific.AvroGenerated
public class FleetDataHealthIssue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4805941671028200777L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FleetDataHealthIssue\",\"namespace\":\"com.trackunit.fleet.data.health.avro\",\"doc\":\"Fleet Data Health Issue\",\"fields\":[{\"name\":\"issueId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"category\",\"type\":{\"type\":\"enum\",\"name\":\"FleetDataHealthIssueCategory\",\"symbols\":[\"UNKNOWN\",\"INSTALL_AND_CONFIGURATION_HEALTH\",\"OPERATIONAL_DEVICE_CORE_DEFINITION\",\"FUNCTIONAL_DEVICE_CORE_DEFINITION\"],\"default\":\"UNKNOWN\"},\"default\":\"UNKNOWN\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"FleetDataHealthIssueType\",\"symbols\":[\"UNKNOWN\",\"OPERATING_HOURS\",\"NO_CAN_DATA_CONFIGURATION\",\"NO_CAN_DATA_WIRING\",\"DIGITAL_KEY_DISABLED\",\"BLUETOOTH_DISABLED\",\"INSTALLATION_VALIDATION_MISSING\",\"LOW_EXTERNAL_POWER\",\"LOW_BATTERY_POWER\",\"LOW_GPS_COVERAGE\",\"LOW_CELLULAR_COVERAGE\",\"FIRMWARE_ERROR\",\"INTERNAL_FLASH_ERROR\",\"EXCEPTION_ERROR\",\"MALICIOUS_REBOOT_TYPE_0_33\",\"TEMPERATURE_SHUTDOWN\"],\"default\":\"UNKNOWN\"},\"default\":\"UNKNOWN\"},{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"FleetDataHealthIssueState\",\"symbols\":[\"UNKNOWN\",\"OPEN\",\"RESOLVED\"],\"default\":\"UNKNOWN\"},\"default\":\"UNKNOWN\"},{\"name\":\"resolvedAt\",\"type\":[\"null\",\"long\"],\"doc\":\"The timestamp (in epoch) when the issue was resolved.\",\"default\":null},{\"name\":\"identifiedAt\",\"type\":\"long\",\"doc\":\"The timestamp (in epoch) when the issue was identified.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FleetDataHealthIssue> ENCODER =
      new BinaryMessageEncoder<FleetDataHealthIssue>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FleetDataHealthIssue> DECODER =
      new BinaryMessageDecoder<FleetDataHealthIssue>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FleetDataHealthIssue> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FleetDataHealthIssue> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FleetDataHealthIssue> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FleetDataHealthIssue>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FleetDataHealthIssue to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FleetDataHealthIssue from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FleetDataHealthIssue instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FleetDataHealthIssue fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence issueId;
  @Deprecated public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueCategory category;
  @Deprecated public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueType type;
  @Deprecated public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueState state;
  /** The timestamp (in epoch) when the issue was resolved. */
  @Deprecated public java.lang.Long resolvedAt;
  /** The timestamp (in epoch) when the issue was identified. */
  @Deprecated public long identifiedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FleetDataHealthIssue() {}

  /**
   * All-args constructor.
   * @param issueId The new value for issueId
   * @param category The new value for category
   * @param type The new value for type
   * @param state The new value for state
   * @param resolvedAt The timestamp (in epoch) when the issue was resolved.
   * @param identifiedAt The timestamp (in epoch) when the issue was identified.
   */
  public FleetDataHealthIssue(java.lang.CharSequence issueId, com.trackunit.fleet.data.health.avro.FleetDataHealthIssueCategory category, com.trackunit.fleet.data.health.avro.FleetDataHealthIssueType type, com.trackunit.fleet.data.health.avro.FleetDataHealthIssueState state, java.lang.Long resolvedAt, java.lang.Long identifiedAt) {
    this.issueId = issueId;
    this.category = category;
    this.type = type;
    this.state = state;
    this.resolvedAt = resolvedAt;
    this.identifiedAt = identifiedAt;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return issueId;
    case 1: return category;
    case 2: return type;
    case 3: return state;
    case 4: return resolvedAt;
    case 5: return identifiedAt;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: issueId = (java.lang.CharSequence)value$; break;
    case 1: category = (com.trackunit.fleet.data.health.avro.FleetDataHealthIssueCategory)value$; break;
    case 2: type = (com.trackunit.fleet.data.health.avro.FleetDataHealthIssueType)value$; break;
    case 3: state = (com.trackunit.fleet.data.health.avro.FleetDataHealthIssueState)value$; break;
    case 4: resolvedAt = (java.lang.Long)value$; break;
    case 5: identifiedAt = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'issueId' field.
   * @return The value of the 'issueId' field.
   */
  public java.lang.CharSequence getIssueId() {
    return issueId;
  }


  /**
   * Sets the value of the 'issueId' field.
   * @param value the value to set.
   */
  public void setIssueId(java.lang.CharSequence value) {
    this.issueId = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return The value of the 'category' field.
   */
  public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueCategory getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(com.trackunit.fleet.data.health.avro.FleetDataHealthIssueCategory value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueType getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(com.trackunit.fleet.data.health.avro.FleetDataHealthIssueType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueState getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(com.trackunit.fleet.data.health.avro.FleetDataHealthIssueState value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'resolvedAt' field.
   * @return The timestamp (in epoch) when the issue was resolved.
   */
  public java.lang.Long getResolvedAt() {
    return resolvedAt;
  }


  /**
   * Sets the value of the 'resolvedAt' field.
   * The timestamp (in epoch) when the issue was resolved.
   * @param value the value to set.
   */
  public void setResolvedAt(java.lang.Long value) {
    this.resolvedAt = value;
  }

  /**
   * Gets the value of the 'identifiedAt' field.
   * @return The timestamp (in epoch) when the issue was identified.
   */
  public long getIdentifiedAt() {
    return identifiedAt;
  }


  /**
   * Sets the value of the 'identifiedAt' field.
   * The timestamp (in epoch) when the issue was identified.
   * @param value the value to set.
   */
  public void setIdentifiedAt(long value) {
    this.identifiedAt = value;
  }

  /**
   * Creates a new FleetDataHealthIssue RecordBuilder.
   * @return A new FleetDataHealthIssue RecordBuilder
   */
  public static com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder newBuilder() {
    return new com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder();
  }

  /**
   * Creates a new FleetDataHealthIssue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FleetDataHealthIssue RecordBuilder
   */
  public static com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder newBuilder(com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder other) {
    if (other == null) {
      return new com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder();
    } else {
      return new com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder(other);
    }
  }

  /**
   * Creates a new FleetDataHealthIssue RecordBuilder by copying an existing FleetDataHealthIssue instance.
   * @param other The existing instance to copy.
   * @return A new FleetDataHealthIssue RecordBuilder
   */
  public static com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder newBuilder(com.trackunit.fleet.data.health.avro.FleetDataHealthIssue other) {
    if (other == null) {
      return new com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder();
    } else {
      return new com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder(other);
    }
  }

  /**
   * RecordBuilder for FleetDataHealthIssue instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FleetDataHealthIssue>
    implements org.apache.avro.data.RecordBuilder<FleetDataHealthIssue> {

    private java.lang.CharSequence issueId;
    private com.trackunit.fleet.data.health.avro.FleetDataHealthIssueCategory category;
    private com.trackunit.fleet.data.health.avro.FleetDataHealthIssueType type;
    private com.trackunit.fleet.data.health.avro.FleetDataHealthIssueState state;
    /** The timestamp (in epoch) when the issue was resolved. */
    private java.lang.Long resolvedAt;
    /** The timestamp (in epoch) when the issue was identified. */
    private long identifiedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.issueId)) {
        this.issueId = data().deepCopy(fields()[0].schema(), other.issueId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.category)) {
        this.category = data().deepCopy(fields()[1].schema(), other.category);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.resolvedAt)) {
        this.resolvedAt = data().deepCopy(fields()[4].schema(), other.resolvedAt);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.identifiedAt)) {
        this.identifiedAt = data().deepCopy(fields()[5].schema(), other.identifiedAt);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing FleetDataHealthIssue instance
     * @param other The existing instance to copy.
     */
    private Builder(com.trackunit.fleet.data.health.avro.FleetDataHealthIssue other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.issueId)) {
        this.issueId = data().deepCopy(fields()[0].schema(), other.issueId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.category)) {
        this.category = data().deepCopy(fields()[1].schema(), other.category);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.resolvedAt)) {
        this.resolvedAt = data().deepCopy(fields()[4].schema(), other.resolvedAt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.identifiedAt)) {
        this.identifiedAt = data().deepCopy(fields()[5].schema(), other.identifiedAt);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'issueId' field.
      * @return The value.
      */
    public java.lang.CharSequence getIssueId() {
      return issueId;
    }


    /**
      * Sets the value of the 'issueId' field.
      * @param value The value of 'issueId'.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder setIssueId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.issueId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'issueId' field has been set.
      * @return True if the 'issueId' field has been set, false otherwise.
      */
    public boolean hasIssueId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'issueId' field.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder clearIssueId() {
      issueId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueCategory getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder setCategory(com.trackunit.fleet.data.health.avro.FleetDataHealthIssueCategory value) {
      validate(fields()[1], value);
      this.category = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder clearCategory() {
      category = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueType getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder setType(com.trackunit.fleet.data.health.avro.FleetDataHealthIssueType value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueState getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder setState(com.trackunit.fleet.data.health.avro.FleetDataHealthIssueState value) {
      validate(fields()[3], value);
      this.state = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder clearState() {
      state = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'resolvedAt' field.
      * The timestamp (in epoch) when the issue was resolved.
      * @return The value.
      */
    public java.lang.Long getResolvedAt() {
      return resolvedAt;
    }


    /**
      * Sets the value of the 'resolvedAt' field.
      * The timestamp (in epoch) when the issue was resolved.
      * @param value The value of 'resolvedAt'.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder setResolvedAt(java.lang.Long value) {
      validate(fields()[4], value);
      this.resolvedAt = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'resolvedAt' field has been set.
      * The timestamp (in epoch) when the issue was resolved.
      * @return True if the 'resolvedAt' field has been set, false otherwise.
      */
    public boolean hasResolvedAt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'resolvedAt' field.
      * The timestamp (in epoch) when the issue was resolved.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder clearResolvedAt() {
      resolvedAt = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'identifiedAt' field.
      * The timestamp (in epoch) when the issue was identified.
      * @return The value.
      */
    public long getIdentifiedAt() {
      return identifiedAt;
    }


    /**
      * Sets the value of the 'identifiedAt' field.
      * The timestamp (in epoch) when the issue was identified.
      * @param value The value of 'identifiedAt'.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder setIdentifiedAt(long value) {
      validate(fields()[5], value);
      this.identifiedAt = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'identifiedAt' field has been set.
      * The timestamp (in epoch) when the issue was identified.
      * @return True if the 'identifiedAt' field has been set, false otherwise.
      */
    public boolean hasIdentifiedAt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'identifiedAt' field.
      * The timestamp (in epoch) when the issue was identified.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder clearIdentifiedAt() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FleetDataHealthIssue build() {
      try {
        FleetDataHealthIssue record = new FleetDataHealthIssue();
        record.issueId = fieldSetFlags()[0] ? this.issueId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.category = fieldSetFlags()[1] ? this.category : (com.trackunit.fleet.data.health.avro.FleetDataHealthIssueCategory) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (com.trackunit.fleet.data.health.avro.FleetDataHealthIssueType) defaultValue(fields()[2]);
        record.state = fieldSetFlags()[3] ? this.state : (com.trackunit.fleet.data.health.avro.FleetDataHealthIssueState) defaultValue(fields()[3]);
        record.resolvedAt = fieldSetFlags()[4] ? this.resolvedAt : (java.lang.Long) defaultValue(fields()[4]);
        record.identifiedAt = fieldSetFlags()[5] ? this.identifiedAt : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FleetDataHealthIssue>
    WRITER$ = (org.apache.avro.io.DatumWriter<FleetDataHealthIssue>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FleetDataHealthIssue>
    READER$ = (org.apache.avro.io.DatumReader<FleetDataHealthIssue>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










