/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.trackunit.fleet.data.health.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Fleet Data Health Issues for specific asset */
@org.apache.avro.specific.AvroGenerated
public class FleetDataHealthIssueIncoming extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5058151575398725013L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FleetDataHealthIssueIncoming\",\"namespace\":\"com.trackunit.fleet.data.health.avro\",\"doc\":\"Fleet Data Health Issues for specific asset\",\"fields\":[{\"name\":\"assetId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"issue\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FleetDataHealthIssue\",\"doc\":\"Fleet Data Health Issue\",\"fields\":[{\"name\":\"issueId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"category\",\"type\":{\"type\":\"enum\",\"name\":\"FleetDataHealthIssueCategory\",\"symbols\":[\"UNKNOWN\",\"INSTALL_AND_CONFIGURATION_HEALTH\",\"OPERATIONAL_DEVICE_CORE_DEFINITION\",\"FUNCTIONAL_DEVICE_CORE_DEFINITION\"],\"default\":\"UNKNOWN\"},\"default\":\"UNKNOWN\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"FleetDataHealthIssueType\",\"symbols\":[\"UNKNOWN\",\"OPERATING_HOURS\",\"NO_CAN_DATA_CONFIGURATION\",\"NO_CAN_DATA_WIRING\",\"DIGITAL_KEY_DISABLED\",\"BLUETOOTH_DISABLED\",\"INSTALLATION_VALIDATION_MISSING\",\"LOW_EXTERNAL_POWER\",\"LOW_BATTERY_POWER\",\"LOW_GPS_COVERAGE\",\"LOW_CELLULAR_COVERAGE\",\"FIRMWARE_ERROR\",\"INTERNAL_FLASH_ERROR\",\"EXCEPTION_ERROR\",\"MALICIOUS_REBOOT_TYPE_0_33\",\"TEMPERATURE_SHUTDOWN\"],\"default\":\"UNKNOWN\"},\"default\":\"UNKNOWN\"},{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"FleetDataHealthIssueState\",\"symbols\":[\"UNKNOWN\",\"OPEN\",\"RESOLVED\"],\"default\":\"UNKNOWN\"},\"default\":\"UNKNOWN\"},{\"name\":\"resolvedAt\",\"type\":[\"null\",\"long\"],\"doc\":\"The timestamp (in epoch) when the issue was resolved.\",\"default\":null},{\"name\":\"identifiedAt\",\"type\":\"long\",\"doc\":\"The timestamp (in epoch) when the issue was identified.\"}]}],\"default\":null},{\"name\":\"dataSource\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FleetDataHealthIssueIncoming> ENCODER =
      new BinaryMessageEncoder<FleetDataHealthIssueIncoming>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FleetDataHealthIssueIncoming> DECODER =
      new BinaryMessageDecoder<FleetDataHealthIssueIncoming>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FleetDataHealthIssueIncoming> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FleetDataHealthIssueIncoming> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FleetDataHealthIssueIncoming> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FleetDataHealthIssueIncoming>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FleetDataHealthIssueIncoming to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FleetDataHealthIssueIncoming from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FleetDataHealthIssueIncoming instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FleetDataHealthIssueIncoming fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence assetId;
  @Deprecated public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue issue;
  @Deprecated public java.lang.CharSequence dataSource;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FleetDataHealthIssueIncoming() {}

  /**
   * All-args constructor.
   * @param assetId The new value for assetId
   * @param issue The new value for issue
   * @param dataSource The new value for dataSource
   */
  public FleetDataHealthIssueIncoming(java.lang.CharSequence assetId, com.trackunit.fleet.data.health.avro.FleetDataHealthIssue issue, java.lang.CharSequence dataSource) {
    this.assetId = assetId;
    this.issue = issue;
    this.dataSource = dataSource;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return assetId;
    case 1: return issue;
    case 2: return dataSource;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: assetId = (java.lang.CharSequence)value$; break;
    case 1: issue = (com.trackunit.fleet.data.health.avro.FleetDataHealthIssue)value$; break;
    case 2: dataSource = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'assetId' field.
   * @return The value of the 'assetId' field.
   */
  public java.lang.CharSequence getAssetId() {
    return assetId;
  }


  /**
   * Sets the value of the 'assetId' field.
   * @param value the value to set.
   */
  public void setAssetId(java.lang.CharSequence value) {
    this.assetId = value;
  }

  /**
   * Gets the value of the 'issue' field.
   * @return The value of the 'issue' field.
   */
  public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue getIssue() {
    return issue;
  }


  /**
   * Sets the value of the 'issue' field.
   * @param value the value to set.
   */
  public void setIssue(com.trackunit.fleet.data.health.avro.FleetDataHealthIssue value) {
    this.issue = value;
  }

  /**
   * Gets the value of the 'dataSource' field.
   * @return The value of the 'dataSource' field.
   */
  public java.lang.CharSequence getDataSource() {
    return dataSource;
  }


  /**
   * Sets the value of the 'dataSource' field.
   * @param value the value to set.
   */
  public void setDataSource(java.lang.CharSequence value) {
    this.dataSource = value;
  }

  /**
   * Creates a new FleetDataHealthIssueIncoming RecordBuilder.
   * @return A new FleetDataHealthIssueIncoming RecordBuilder
   */
  public static com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder newBuilder() {
    return new com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder();
  }

  /**
   * Creates a new FleetDataHealthIssueIncoming RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FleetDataHealthIssueIncoming RecordBuilder
   */
  public static com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder newBuilder(com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder other) {
    if (other == null) {
      return new com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder();
    } else {
      return new com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder(other);
    }
  }

  /**
   * Creates a new FleetDataHealthIssueIncoming RecordBuilder by copying an existing FleetDataHealthIssueIncoming instance.
   * @param other The existing instance to copy.
   * @return A new FleetDataHealthIssueIncoming RecordBuilder
   */
  public static com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder newBuilder(com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming other) {
    if (other == null) {
      return new com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder();
    } else {
      return new com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder(other);
    }
  }

  /**
   * RecordBuilder for FleetDataHealthIssueIncoming instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FleetDataHealthIssueIncoming>
    implements org.apache.avro.data.RecordBuilder<FleetDataHealthIssueIncoming> {

    private java.lang.CharSequence assetId;
    private com.trackunit.fleet.data.health.avro.FleetDataHealthIssue issue;
    private com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder issueBuilder;
    private java.lang.CharSequence dataSource;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.assetId)) {
        this.assetId = data().deepCopy(fields()[0].schema(), other.assetId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.issue)) {
        this.issue = data().deepCopy(fields()[1].schema(), other.issue);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasIssueBuilder()) {
        this.issueBuilder = com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.newBuilder(other.getIssueBuilder());
      }
      if (isValidValue(fields()[2], other.dataSource)) {
        this.dataSource = data().deepCopy(fields()[2].schema(), other.dataSource);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing FleetDataHealthIssueIncoming instance
     * @param other The existing instance to copy.
     */
    private Builder(com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.assetId)) {
        this.assetId = data().deepCopy(fields()[0].schema(), other.assetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.issue)) {
        this.issue = data().deepCopy(fields()[1].schema(), other.issue);
        fieldSetFlags()[1] = true;
      }
      this.issueBuilder = null;
      if (isValidValue(fields()[2], other.dataSource)) {
        this.dataSource = data().deepCopy(fields()[2].schema(), other.dataSource);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'assetId' field.
      * @return The value.
      */
    public java.lang.CharSequence getAssetId() {
      return assetId;
    }


    /**
      * Sets the value of the 'assetId' field.
      * @param value The value of 'assetId'.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder setAssetId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.assetId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'assetId' field has been set.
      * @return True if the 'assetId' field has been set, false otherwise.
      */
    public boolean hasAssetId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'assetId' field.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder clearAssetId() {
      assetId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'issue' field.
      * @return The value.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue getIssue() {
      return issue;
    }


    /**
      * Sets the value of the 'issue' field.
      * @param value The value of 'issue'.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder setIssue(com.trackunit.fleet.data.health.avro.FleetDataHealthIssue value) {
      validate(fields()[1], value);
      this.issueBuilder = null;
      this.issue = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'issue' field has been set.
      * @return True if the 'issue' field has been set, false otherwise.
      */
    public boolean hasIssue() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'issue' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder getIssueBuilder() {
      if (issueBuilder == null) {
        if (hasIssue()) {
          setIssueBuilder(com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.newBuilder(issue));
        } else {
          setIssueBuilder(com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.newBuilder());
        }
      }
      return issueBuilder;
    }

    /**
     * Sets the Builder instance for the 'issue' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder setIssueBuilder(com.trackunit.fleet.data.health.avro.FleetDataHealthIssue.Builder value) {
      clearIssue();
      issueBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'issue' field has an active Builder instance
     * @return True if the 'issue' field has an active Builder instance
     */
    public boolean hasIssueBuilder() {
      return issueBuilder != null;
    }

    /**
      * Clears the value of the 'issue' field.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder clearIssue() {
      issue = null;
      issueBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataSource' field.
      * @return The value.
      */
    public java.lang.CharSequence getDataSource() {
      return dataSource;
    }


    /**
      * Sets the value of the 'dataSource' field.
      * @param value The value of 'dataSource'.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder setDataSource(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.dataSource = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dataSource' field has been set.
      * @return True if the 'dataSource' field has been set, false otherwise.
      */
    public boolean hasDataSource() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dataSource' field.
      * @return This builder.
      */
    public com.trackunit.fleet.data.health.avro.FleetDataHealthIssueIncoming.Builder clearDataSource() {
      dataSource = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FleetDataHealthIssueIncoming build() {
      try {
        FleetDataHealthIssueIncoming record = new FleetDataHealthIssueIncoming();
        record.assetId = fieldSetFlags()[0] ? this.assetId : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (issueBuilder != null) {
          try {
            record.issue = this.issueBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("issue"));
            throw e;
          }
        } else {
          record.issue = fieldSetFlags()[1] ? this.issue : (com.trackunit.fleet.data.health.avro.FleetDataHealthIssue) defaultValue(fields()[1]);
        }
        record.dataSource = fieldSetFlags()[2] ? this.dataSource : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FleetDataHealthIssueIncoming>
    WRITER$ = (org.apache.avro.io.DatumWriter<FleetDataHealthIssueIncoming>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FleetDataHealthIssueIncoming>
    READER$ = (org.apache.avro.io.DatumReader<FleetDataHealthIssueIncoming>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










