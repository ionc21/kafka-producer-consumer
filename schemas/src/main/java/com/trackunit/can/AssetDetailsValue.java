/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.trackunit.can;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Report containing asset details values */
@org.apache.avro.specific.AvroGenerated
public class AssetDetailsValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8358443620351831367L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AssetDetailsValue\",\"namespace\":\"com.trackunit.can\",\"doc\":\"Report containing asset details values\",\"fields\":[{\"name\":\"model\",\"type\":\"string\",\"doc\":\"Asset model name\"},{\"name\":\"brand\",\"type\":\"string\",\"doc\":\"Asset brand name\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"doc\":\"Asset type\",\"default\":null},{\"name\":\"productionYearRange\",\"type\":[\"null\",\"string\"],\"doc\":\"Asset production year range\",\"default\":null},{\"name\":\"specCheckId\",\"type\":[\"null\",\"int\"],\"doc\":\"Asset spec check id\",\"default\":null},{\"name\":\"canProfiles\",\"type\":{\"type\":\"array\",\"items\":\"int\",\"default\":[]},\"doc\":\"Asset can profiles suggestions\"},{\"name\":\"machineInsights\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"int\",\"default\":[]}},\"doc\":\"Asset machine insights\"},{\"name\":\"averageValues\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},\"doc\":\"Asset average values\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AssetDetailsValue> ENCODER =
      new BinaryMessageEncoder<AssetDetailsValue>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AssetDetailsValue> DECODER =
      new BinaryMessageDecoder<AssetDetailsValue>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AssetDetailsValue> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AssetDetailsValue> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AssetDetailsValue> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AssetDetailsValue>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AssetDetailsValue to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AssetDetailsValue from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AssetDetailsValue instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AssetDetailsValue fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Asset model name */
  @Deprecated public java.lang.CharSequence model;
  /** Asset brand name */
  @Deprecated public java.lang.CharSequence brand;
  /** Asset type */
  @Deprecated public java.lang.CharSequence type;
  /** Asset production year range */
  @Deprecated public java.lang.CharSequence productionYearRange;
  /** Asset spec check id */
  @Deprecated public java.lang.Integer specCheckId;
  /** Asset can profiles suggestions */
  @Deprecated public java.util.List<java.lang.Integer> canProfiles;
  /** Asset machine insights */
  @Deprecated public java.util.List<java.util.List<java.lang.Integer>> machineInsights;
  /** Asset average values */
  @Deprecated public java.util.List<java.util.List<java.lang.Double>> averageValues;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AssetDetailsValue() {}

  /**
   * All-args constructor.
   * @param model Asset model name
   * @param brand Asset brand name
   * @param type Asset type
   * @param productionYearRange Asset production year range
   * @param specCheckId Asset spec check id
   * @param canProfiles Asset can profiles suggestions
   * @param machineInsights Asset machine insights
   * @param averageValues Asset average values
   */
  public AssetDetailsValue(java.lang.CharSequence model, java.lang.CharSequence brand, java.lang.CharSequence type, java.lang.CharSequence productionYearRange, java.lang.Integer specCheckId, java.util.List<java.lang.Integer> canProfiles, java.util.List<java.util.List<java.lang.Integer>> machineInsights, java.util.List<java.util.List<java.lang.Double>> averageValues) {
    this.model = model;
    this.brand = brand;
    this.type = type;
    this.productionYearRange = productionYearRange;
    this.specCheckId = specCheckId;
    this.canProfiles = canProfiles;
    this.machineInsights = machineInsights;
    this.averageValues = averageValues;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return model;
    case 1: return brand;
    case 2: return type;
    case 3: return productionYearRange;
    case 4: return specCheckId;
    case 5: return canProfiles;
    case 6: return machineInsights;
    case 7: return averageValues;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: model = (java.lang.CharSequence)value$; break;
    case 1: brand = (java.lang.CharSequence)value$; break;
    case 2: type = (java.lang.CharSequence)value$; break;
    case 3: productionYearRange = (java.lang.CharSequence)value$; break;
    case 4: specCheckId = (java.lang.Integer)value$; break;
    case 5: canProfiles = (java.util.List<java.lang.Integer>)value$; break;
    case 6: machineInsights = (java.util.List<java.util.List<java.lang.Integer>>)value$; break;
    case 7: averageValues = (java.util.List<java.util.List<java.lang.Double>>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'model' field.
   * @return Asset model name
   */
  public java.lang.CharSequence getModel() {
    return model;
  }


  /**
   * Sets the value of the 'model' field.
   * Asset model name
   * @param value the value to set.
   */
  public void setModel(java.lang.CharSequence value) {
    this.model = value;
  }

  /**
   * Gets the value of the 'brand' field.
   * @return Asset brand name
   */
  public java.lang.CharSequence getBrand() {
    return brand;
  }


  /**
   * Sets the value of the 'brand' field.
   * Asset brand name
   * @param value the value to set.
   */
  public void setBrand(java.lang.CharSequence value) {
    this.brand = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Asset type
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Asset type
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'productionYearRange' field.
   * @return Asset production year range
   */
  public java.lang.CharSequence getProductionYearRange() {
    return productionYearRange;
  }


  /**
   * Sets the value of the 'productionYearRange' field.
   * Asset production year range
   * @param value the value to set.
   */
  public void setProductionYearRange(java.lang.CharSequence value) {
    this.productionYearRange = value;
  }

  /**
   * Gets the value of the 'specCheckId' field.
   * @return Asset spec check id
   */
  public java.lang.Integer getSpecCheckId() {
    return specCheckId;
  }


  /**
   * Sets the value of the 'specCheckId' field.
   * Asset spec check id
   * @param value the value to set.
   */
  public void setSpecCheckId(java.lang.Integer value) {
    this.specCheckId = value;
  }

  /**
   * Gets the value of the 'canProfiles' field.
   * @return Asset can profiles suggestions
   */
  public java.util.List<java.lang.Integer> getCanProfiles() {
    return canProfiles;
  }


  /**
   * Sets the value of the 'canProfiles' field.
   * Asset can profiles suggestions
   * @param value the value to set.
   */
  public void setCanProfiles(java.util.List<java.lang.Integer> value) {
    this.canProfiles = value;
  }

  /**
   * Gets the value of the 'machineInsights' field.
   * @return Asset machine insights
   */
  public java.util.List<java.util.List<java.lang.Integer>> getMachineInsights() {
    return machineInsights;
  }


  /**
   * Sets the value of the 'machineInsights' field.
   * Asset machine insights
   * @param value the value to set.
   */
  public void setMachineInsights(java.util.List<java.util.List<java.lang.Integer>> value) {
    this.machineInsights = value;
  }

  /**
   * Gets the value of the 'averageValues' field.
   * @return Asset average values
   */
  public java.util.List<java.util.List<java.lang.Double>> getAverageValues() {
    return averageValues;
  }


  /**
   * Sets the value of the 'averageValues' field.
   * Asset average values
   * @param value the value to set.
   */
  public void setAverageValues(java.util.List<java.util.List<java.lang.Double>> value) {
    this.averageValues = value;
  }

  /**
   * Creates a new AssetDetailsValue RecordBuilder.
   * @return A new AssetDetailsValue RecordBuilder
   */
  public static com.trackunit.can.AssetDetailsValue.Builder newBuilder() {
    return new com.trackunit.can.AssetDetailsValue.Builder();
  }

  /**
   * Creates a new AssetDetailsValue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AssetDetailsValue RecordBuilder
   */
  public static com.trackunit.can.AssetDetailsValue.Builder newBuilder(com.trackunit.can.AssetDetailsValue.Builder other) {
    if (other == null) {
      return new com.trackunit.can.AssetDetailsValue.Builder();
    } else {
      return new com.trackunit.can.AssetDetailsValue.Builder(other);
    }
  }

  /**
   * Creates a new AssetDetailsValue RecordBuilder by copying an existing AssetDetailsValue instance.
   * @param other The existing instance to copy.
   * @return A new AssetDetailsValue RecordBuilder
   */
  public static com.trackunit.can.AssetDetailsValue.Builder newBuilder(com.trackunit.can.AssetDetailsValue other) {
    if (other == null) {
      return new com.trackunit.can.AssetDetailsValue.Builder();
    } else {
      return new com.trackunit.can.AssetDetailsValue.Builder(other);
    }
  }

  /**
   * RecordBuilder for AssetDetailsValue instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AssetDetailsValue>
    implements org.apache.avro.data.RecordBuilder<AssetDetailsValue> {

    /** Asset model name */
    private java.lang.CharSequence model;
    /** Asset brand name */
    private java.lang.CharSequence brand;
    /** Asset type */
    private java.lang.CharSequence type;
    /** Asset production year range */
    private java.lang.CharSequence productionYearRange;
    /** Asset spec check id */
    private java.lang.Integer specCheckId;
    /** Asset can profiles suggestions */
    private java.util.List<java.lang.Integer> canProfiles;
    /** Asset machine insights */
    private java.util.List<java.util.List<java.lang.Integer>> machineInsights;
    /** Asset average values */
    private java.util.List<java.util.List<java.lang.Double>> averageValues;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.trackunit.can.AssetDetailsValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.model)) {
        this.model = data().deepCopy(fields()[0].schema(), other.model);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.brand)) {
        this.brand = data().deepCopy(fields()[1].schema(), other.brand);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.productionYearRange)) {
        this.productionYearRange = data().deepCopy(fields()[3].schema(), other.productionYearRange);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.specCheckId)) {
        this.specCheckId = data().deepCopy(fields()[4].schema(), other.specCheckId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.canProfiles)) {
        this.canProfiles = data().deepCopy(fields()[5].schema(), other.canProfiles);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.machineInsights)) {
        this.machineInsights = data().deepCopy(fields()[6].schema(), other.machineInsights);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.averageValues)) {
        this.averageValues = data().deepCopy(fields()[7].schema(), other.averageValues);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing AssetDetailsValue instance
     * @param other The existing instance to copy.
     */
    private Builder(com.trackunit.can.AssetDetailsValue other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.model)) {
        this.model = data().deepCopy(fields()[0].schema(), other.model);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.brand)) {
        this.brand = data().deepCopy(fields()[1].schema(), other.brand);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.productionYearRange)) {
        this.productionYearRange = data().deepCopy(fields()[3].schema(), other.productionYearRange);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.specCheckId)) {
        this.specCheckId = data().deepCopy(fields()[4].schema(), other.specCheckId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.canProfiles)) {
        this.canProfiles = data().deepCopy(fields()[5].schema(), other.canProfiles);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.machineInsights)) {
        this.machineInsights = data().deepCopy(fields()[6].schema(), other.machineInsights);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.averageValues)) {
        this.averageValues = data().deepCopy(fields()[7].schema(), other.averageValues);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'model' field.
      * Asset model name
      * @return The value.
      */
    public java.lang.CharSequence getModel() {
      return model;
    }


    /**
      * Sets the value of the 'model' field.
      * Asset model name
      * @param value The value of 'model'.
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder setModel(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.model = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'model' field has been set.
      * Asset model name
      * @return True if the 'model' field has been set, false otherwise.
      */
    public boolean hasModel() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'model' field.
      * Asset model name
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder clearModel() {
      model = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'brand' field.
      * Asset brand name
      * @return The value.
      */
    public java.lang.CharSequence getBrand() {
      return brand;
    }


    /**
      * Sets the value of the 'brand' field.
      * Asset brand name
      * @param value The value of 'brand'.
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder setBrand(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.brand = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'brand' field has been set.
      * Asset brand name
      * @return True if the 'brand' field has been set, false otherwise.
      */
    public boolean hasBrand() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'brand' field.
      * Asset brand name
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder clearBrand() {
      brand = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Asset type
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Asset type
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder setType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Asset type
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * Asset type
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'productionYearRange' field.
      * Asset production year range
      * @return The value.
      */
    public java.lang.CharSequence getProductionYearRange() {
      return productionYearRange;
    }


    /**
      * Sets the value of the 'productionYearRange' field.
      * Asset production year range
      * @param value The value of 'productionYearRange'.
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder setProductionYearRange(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.productionYearRange = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'productionYearRange' field has been set.
      * Asset production year range
      * @return True if the 'productionYearRange' field has been set, false otherwise.
      */
    public boolean hasProductionYearRange() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'productionYearRange' field.
      * Asset production year range
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder clearProductionYearRange() {
      productionYearRange = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'specCheckId' field.
      * Asset spec check id
      * @return The value.
      */
    public java.lang.Integer getSpecCheckId() {
      return specCheckId;
    }


    /**
      * Sets the value of the 'specCheckId' field.
      * Asset spec check id
      * @param value The value of 'specCheckId'.
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder setSpecCheckId(java.lang.Integer value) {
      validate(fields()[4], value);
      this.specCheckId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'specCheckId' field has been set.
      * Asset spec check id
      * @return True if the 'specCheckId' field has been set, false otherwise.
      */
    public boolean hasSpecCheckId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'specCheckId' field.
      * Asset spec check id
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder clearSpecCheckId() {
      specCheckId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'canProfiles' field.
      * Asset can profiles suggestions
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getCanProfiles() {
      return canProfiles;
    }


    /**
      * Sets the value of the 'canProfiles' field.
      * Asset can profiles suggestions
      * @param value The value of 'canProfiles'.
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder setCanProfiles(java.util.List<java.lang.Integer> value) {
      validate(fields()[5], value);
      this.canProfiles = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'canProfiles' field has been set.
      * Asset can profiles suggestions
      * @return True if the 'canProfiles' field has been set, false otherwise.
      */
    public boolean hasCanProfiles() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'canProfiles' field.
      * Asset can profiles suggestions
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder clearCanProfiles() {
      canProfiles = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'machineInsights' field.
      * Asset machine insights
      * @return The value.
      */
    public java.util.List<java.util.List<java.lang.Integer>> getMachineInsights() {
      return machineInsights;
    }


    /**
      * Sets the value of the 'machineInsights' field.
      * Asset machine insights
      * @param value The value of 'machineInsights'.
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder setMachineInsights(java.util.List<java.util.List<java.lang.Integer>> value) {
      validate(fields()[6], value);
      this.machineInsights = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'machineInsights' field has been set.
      * Asset machine insights
      * @return True if the 'machineInsights' field has been set, false otherwise.
      */
    public boolean hasMachineInsights() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'machineInsights' field.
      * Asset machine insights
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder clearMachineInsights() {
      machineInsights = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageValues' field.
      * Asset average values
      * @return The value.
      */
    public java.util.List<java.util.List<java.lang.Double>> getAverageValues() {
      return averageValues;
    }


    /**
      * Sets the value of the 'averageValues' field.
      * Asset average values
      * @param value The value of 'averageValues'.
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder setAverageValues(java.util.List<java.util.List<java.lang.Double>> value) {
      validate(fields()[7], value);
      this.averageValues = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'averageValues' field has been set.
      * Asset average values
      * @return True if the 'averageValues' field has been set, false otherwise.
      */
    public boolean hasAverageValues() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'averageValues' field.
      * Asset average values
      * @return This builder.
      */
    public com.trackunit.can.AssetDetailsValue.Builder clearAverageValues() {
      averageValues = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AssetDetailsValue build() {
      try {
        AssetDetailsValue record = new AssetDetailsValue();
        record.model = fieldSetFlags()[0] ? this.model : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.brand = fieldSetFlags()[1] ? this.brand : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.productionYearRange = fieldSetFlags()[3] ? this.productionYearRange : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.specCheckId = fieldSetFlags()[4] ? this.specCheckId : (java.lang.Integer) defaultValue(fields()[4]);
        record.canProfiles = fieldSetFlags()[5] ? this.canProfiles : (java.util.List<java.lang.Integer>) defaultValue(fields()[5]);
        record.machineInsights = fieldSetFlags()[6] ? this.machineInsights : (java.util.List<java.util.List<java.lang.Integer>>) defaultValue(fields()[6]);
        record.averageValues = fieldSetFlags()[7] ? this.averageValues : (java.util.List<java.util.List<java.lang.Double>>) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AssetDetailsValue>
    WRITER$ = (org.apache.avro.io.DatumWriter<AssetDetailsValue>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AssetDetailsValue>
    READER$ = (org.apache.avro.io.DatumReader<AssetDetailsValue>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.model);

    out.writeString(this.brand);

    if (this.type == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.type);
    }

    if (this.productionYearRange == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.productionYearRange);
    }

    if (this.specCheckId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.specCheckId);
    }

    long size0 = this.canProfiles.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.Integer e0: this.canProfiles) {
      actualSize0++;
      out.startItem();
      out.writeInt(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.machineInsights.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.List<java.lang.Integer> e1: this.machineInsights) {
      actualSize1++;
      out.startItem();
      long size2 = e1.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (java.lang.Integer e2: e1) {
        actualSize2++;
        out.startItem();
        out.writeInt(e2);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size3 = this.averageValues.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (java.util.List<java.lang.Double> e3: this.averageValues) {
      actualSize3++;
      out.startItem();
      long size4 = e3.size();
      out.writeArrayStart();
      out.setItemCount(size4);
      long actualSize4 = 0;
      for (java.lang.Double e4: e3) {
        actualSize4++;
        out.startItem();
        out.writeDouble(e4);
      }
      out.writeArrayEnd();
      if (actualSize4 != size4)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.model = in.readString(this.model instanceof Utf8 ? (Utf8)this.model : null);

      this.brand = in.readString(this.brand instanceof Utf8 ? (Utf8)this.brand : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.type = null;
      } else {
        this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.productionYearRange = null;
      } else {
        this.productionYearRange = in.readString(this.productionYearRange instanceof Utf8 ? (Utf8)this.productionYearRange : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.specCheckId = null;
      } else {
        this.specCheckId = in.readInt();
      }

      long size0 = in.readArrayStart();
      java.util.List<java.lang.Integer> a0 = this.canProfiles;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.Integer>((int)size0, SCHEMA$.getField("canProfiles").schema());
        this.canProfiles = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.Integer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.Integer e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readInt();
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.util.List<java.lang.Integer>> a1 = this.machineInsights;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.util.List<java.lang.Integer>>((int)size1, SCHEMA$.getField("machineInsights").schema());
        this.machineInsights = a1;
      } else a1.clear();
      SpecificData.Array<java.util.List<java.lang.Integer>> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Integer>>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.util.List<java.lang.Integer> e1 = (ga1 != null ? ga1.peek() : null);
          long size2 = in.readArrayStart();
          java.util.List<java.lang.Integer> a2 = e1;
          if (a2 == null) {
            a2 = new SpecificData.Array<java.lang.Integer>((int)size2, SCHEMA$.getField("machineInsights").schema().getElementType());
            e1 = a2;
          } else a2.clear();
          SpecificData.Array<java.lang.Integer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.Integer e2 = (ga2 != null ? ga2.peek() : null);
              e2 = in.readInt();
              a2.add(e2);
            }
          }
          a1.add(e1);
        }
      }

      long size3 = in.readArrayStart();
      java.util.List<java.util.List<java.lang.Double>> a3 = this.averageValues;
      if (a3 == null) {
        a3 = new SpecificData.Array<java.util.List<java.lang.Double>>((int)size3, SCHEMA$.getField("averageValues").schema());
        this.averageValues = a3;
      } else a3.clear();
      SpecificData.Array<java.util.List<java.lang.Double>> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Double>>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          java.util.List<java.lang.Double> e3 = (ga3 != null ? ga3.peek() : null);
          long size4 = in.readArrayStart();
          java.util.List<java.lang.Double> a4 = e3;
          if (a4 == null) {
            a4 = new SpecificData.Array<java.lang.Double>((int)size4, SCHEMA$.getField("averageValues").schema().getElementType());
            e3 = a4;
          } else a4.clear();
          SpecificData.Array<java.lang.Double> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a4 : null);
          for ( ; 0 < size4; size4 = in.arrayNext()) {
            for ( ; size4 != 0; size4--) {
              java.lang.Double e4 = (ga4 != null ? ga4.peek() : null);
              e4 = in.readDouble();
              a4.add(e4);
            }
          }
          a3.add(e3);
        }
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.model = in.readString(this.model instanceof Utf8 ? (Utf8)this.model : null);
          break;

        case 1:
          this.brand = in.readString(this.brand instanceof Utf8 ? (Utf8)this.brand : null);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.type = null;
          } else {
            this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.productionYearRange = null;
          } else {
            this.productionYearRange = in.readString(this.productionYearRange instanceof Utf8 ? (Utf8)this.productionYearRange : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.specCheckId = null;
          } else {
            this.specCheckId = in.readInt();
          }
          break;

        case 5:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.Integer> a0 = this.canProfiles;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.Integer>((int)size0, SCHEMA$.getField("canProfiles").schema());
            this.canProfiles = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.Integer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.Integer e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readInt();
              a0.add(e0);
            }
          }
          break;

        case 6:
          long size1 = in.readArrayStart();
          java.util.List<java.util.List<java.lang.Integer>> a1 = this.machineInsights;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.util.List<java.lang.Integer>>((int)size1, SCHEMA$.getField("machineInsights").schema());
            this.machineInsights = a1;
          } else a1.clear();
          SpecificData.Array<java.util.List<java.lang.Integer>> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Integer>>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.util.List<java.lang.Integer> e1 = (ga1 != null ? ga1.peek() : null);
              long size2 = in.readArrayStart();
              java.util.List<java.lang.Integer> a2 = e1;
              if (a2 == null) {
                a2 = new SpecificData.Array<java.lang.Integer>((int)size2, SCHEMA$.getField("machineInsights").schema().getElementType());
                e1 = a2;
              } else a2.clear();
              SpecificData.Array<java.lang.Integer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a2 : null);
              for ( ; 0 < size2; size2 = in.arrayNext()) {
                for ( ; size2 != 0; size2--) {
                  java.lang.Integer e2 = (ga2 != null ? ga2.peek() : null);
                  e2 = in.readInt();
                  a2.add(e2);
                }
              }
              a1.add(e1);
            }
          }
          break;

        case 7:
          long size3 = in.readArrayStart();
          java.util.List<java.util.List<java.lang.Double>> a3 = this.averageValues;
          if (a3 == null) {
            a3 = new SpecificData.Array<java.util.List<java.lang.Double>>((int)size3, SCHEMA$.getField("averageValues").schema());
            this.averageValues = a3;
          } else a3.clear();
          SpecificData.Array<java.util.List<java.lang.Double>> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Double>>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              java.util.List<java.lang.Double> e3 = (ga3 != null ? ga3.peek() : null);
              long size4 = in.readArrayStart();
              java.util.List<java.lang.Double> a4 = e3;
              if (a4 == null) {
                a4 = new SpecificData.Array<java.lang.Double>((int)size4, SCHEMA$.getField("averageValues").schema().getElementType());
                e3 = a4;
              } else a4.clear();
              SpecificData.Array<java.lang.Double> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a4 : null);
              for ( ; 0 < size4; size4 = in.arrayNext()) {
                for ( ; size4 != 0; size4--) {
                  java.lang.Double e4 = (ga4 != null ? ga4.peek() : null);
                  e4 = in.readDouble();
                  a4.add(e4);
                }
              }
              a3.add(e3);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










